{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\kshan\\\\Desktop\\\\Web dev projects\\\\subscriptions_tracker\\\\context\\\\SubsContext.js\";\nimport React, { createContext, useState } from 'react';\nconst SubsContext = /*#__PURE__*/createContext();\n\nconst SubsProvider = ({\n  children\n}) => {\n  const {\n    0: subs,\n    1: setSubs\n  } = useState([]);\n\n  const refreshSubs = async () => {\n    try {\n      const res = await fetch('/api/getSubs');\n      const latestSubs = await res.json();\n      setSubs(latestSubs);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const addSubs = async fields => {\n    try {\n      const res = await fetch('/api/createSubs', {\n        method: 'POST',\n        body: JSON.stringify(fields),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      const newTodos = await res.json();\n      setSubs(prevSubs => {\n        const updatedSubs = [newTodos, ...prevSubs];\n        return updatedSubs;\n      });\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  const updateSubs = async updatedSub => {\n    try {\n      const res = await fetch('/api/updateSubs', {\n        method: 'PUT',\n        body: JSON.stringify(updatedSub),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      await res.json();\n      setSubs(prevSubs => {\n        const existingSubs = [...prevSubs];\n        const existingSub = existingSubs.find(subscription => subscription.id === updatedSub.id);\n        existingSub.fields = updatedSub.fields;\n        return existingSubs;\n      });\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const deleteSubs = async id => {\n    try {\n      await fetch('/api/deleteSubs', {\n        method: 'DELETE',\n        body: JSON.stringify({\n          id\n        }),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      setSubs(prevSubs => {\n        return prevSubs.filter(sub => sub.id !== id);\n      });\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(SubsContext.Provider, {\n    value: {\n      subs,\n      setSubs,\n      refreshSubs,\n      updateSubs,\n      deleteSubs,\n      addSubs\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 12\n  }, this);\n};\n\nexport { SubsProvider, SubsContext };","map":{"version":3,"sources":["C:/Users/kshan/Desktop/Web dev projects/subscriptions_tracker/context/SubsContext.js"],"names":["React","createContext","useState","SubsContext","SubsProvider","children","subs","setSubs","refreshSubs","res","fetch","latestSubs","json","error","console","addSubs","fields","method","body","JSON","stringify","headers","newTodos","prevSubs","updatedSubs","err","updateSubs","updatedSub","existingSubs","existingSub","find","subscription","id","deleteSubs","filter","sub"],"mappings":"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","sourcesContent":["import React,{createContext, useState} from 'react'\r\n\r\nconst SubsContext=createContext()\r\n\r\nconst SubsProvider=({children})=>{\r\n    const [subs,setSubs]=useState([])\r\n    const refreshSubs=async()=>{\r\n        try {\r\n            const res=await fetch('/api/getSubs')\r\n            const latestSubs=await res.json()\r\n            setSubs(latestSubs)\r\n            \r\n        } catch (error) {\r\n            console.error(error)\r\n        }\r\n    }\r\n    const addSubs=async (fields)=>{\r\n        try {\r\n            \r\n            const res = await fetch('/api/createSubs', {\r\n                method: 'POST',\r\n                body: JSON.stringify(fields),\r\n                headers: { 'Content-Type': 'application/json' },\r\n            });\r\n            const newTodos = await res.json();\r\n            setSubs((prevSubs) => {\r\n                const updatedSubs = [newTodos, ...prevSubs];\r\n                return updatedSubs;\r\n            });\r\n        } catch (err) {\r\n            console.error(err);\r\n        }\r\n    }\r\n    const updateSubs=async(updatedSub)=>{\r\n        try {\r\n            const res=await fetch('/api/updateSubs',{\r\n                method:'PUT',\r\n                body:JSON.stringify(updatedSub),\r\n                headers:{'Content-Type':'application/json'}\r\n            })\r\n            await res.json()\r\n            setSubs((prevSubs)=>{\r\n                const existingSubs=[...prevSubs]\r\n                const existingSub=existingSubs.find(subscription=>subscription.id===updatedSub.id)\r\n                existingSub.fields=updatedSub.fields\r\n                return existingSubs\r\n            })\r\n            \r\n        } catch (error) {\r\n            console.error(error)\r\n        }\r\n    }\r\n    const deleteSubs=async(id)=>{\r\n        try {\r\n            await fetch('/api/deleteSubs',{\r\n                method:'DELETE',\r\n                body:JSON.stringify({id}),\r\n                headers:{'Content-Type':'application/json'}\r\n            })\r\n           \r\n            setSubs((prevSubs)=>{\r\n                return prevSubs.filter((sub)=>sub.id!==id)\r\n                \r\n            })\r\n            \r\n        } catch (error) {\r\n            console.error(error)\r\n        }\r\n    }\r\n    return <SubsContext.Provider value={{\r\n        subs,setSubs,refreshSubs,updateSubs,deleteSubs,addSubs\r\n    }}>{children}</SubsContext.Provider>\r\n}\r\n\r\nexport {SubsProvider,SubsContext}"]},"metadata":{},"sourceType":"module"}